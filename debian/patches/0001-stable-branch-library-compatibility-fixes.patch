From: Jason Rhinelander <jason@imaginary.ca>
Date: Wed, 11 Dec 2024 18:21:37 -0400
Subject: stable branch library compatibility fixes

Patches stable to make it compatible with the latest versions of
dependent libraries.

- bump oxen-encoding to latest
- bump oxen-logging to latest
- bump to C++20
- patch fix everything that broke
---
 CMakeLists.txt                |  2 +-
 daemon/lokinet-vpn.cpp        |  6 +++---
 daemon/lokinet.cpp            |  2 +-
 llarp/config/config.cpp       |  2 +-
 llarp/config/definition.hpp   |  2 +-
 llarp/dns/server.cpp          |  4 ++--
 llarp/net/ip_address.hpp      |  2 +-
 llarp/net/ip_packet.hpp       |  6 +++---
 llarp/net/net.hpp             |  2 +-
 llarp/net/net_int.hpp         | 14 +++++++-------
 llarp/quic/connection.cpp     |  4 ++--
 llarp/quic/stream.cpp         |  2 +-
 llarp/router/router.cpp       |  3 +--
 llarp/router_contact.cpp      |  7 ++++++-
 llarp/util/buffer.hpp         | 10 +++++-----
 llarp/util/logging.hpp        | 10 +++++-----
 llarp/util/logging/buffer.cpp |  8 ++++----
 llarp/util/str.cpp            | 15 ++++++++-------
 llarp/util/time.cpp           | 16 +++++++++-------
 19 files changed, 62 insertions(+), 55 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 13514b7..87fc5a0 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -100,7 +100,7 @@ endif()
 
 include(CheckCXXSourceCompiles)
 include(CheckLibraryExists)
-set(CMAKE_CXX_STANDARD 17)
+set(CMAKE_CXX_STANDARD 20)
 set(CMAKE_CXX_STANDARD_REQUIRED ON)
 set(CMAKE_CXX_EXTENSIONS OFF)
 set(CMAKE_C_STANDARD 99)
diff --git a/daemon/lokinet-vpn.cpp b/daemon/lokinet-vpn.cpp
index 3cdc795..28fdd7c 100644
--- a/daemon/lokinet-vpn.cpp
+++ b/daemon/lokinet-vpn.cpp
@@ -78,7 +78,7 @@ namespace
   // from within main().
   template <typename... T>
   [[nodiscard]] int
-  exit_error(int code, const std::string& format, T&&... args)
+  exit_error(int code, const fmt::format_string<T...> format, T&&... args)
   {
     fmt::print(format, std::forward<T>(args)...);
     fmt::print("\n");
@@ -88,7 +88,7 @@ namespace
   // Same as above, but with code omitted (uses exit code 1)
   template <typename... T>
   [[nodiscard]] int
-  exit_error(const std::string& format, T&&... args)
+  exit_error(const fmt::format_string<T...>& format, T&&... args)
   {
     return exit_error(1, format, std::forward<T>(args)...);
   }
@@ -244,7 +244,7 @@ main(int argc, char* argv[])
     if (auto err_it = maybe_result->find("error");
         err_it != maybe_result->end() and not err_it.value().is_null())
     {
-      return exit_error("{}", err_it.value());
+      return exit_error("{}", err_it.value().dump());
     }
   }
   if (goDown)
diff --git a/daemon/lokinet.cpp b/daemon/lokinet.cpp
index 2683cca..02ee8ce 100644
--- a/daemon/lokinet.cpp
+++ b/daemon/lokinet.cpp
@@ -552,7 +552,7 @@ lokinet_main(int argc, char** argv)
             "file a bug report now or be cursed with this "
             "annoying image in your syslog for all time."})
       {
-        llarp::log::critical(deadlock_cat, wtf);
+        llarp::log::critical(deadlock_cat, "{}", wtf);
         llarp::log::flush();
       }
       llarp::sys::service_manager->failed();
diff --git a/llarp/config/config.cpp b/llarp/config/config.cpp
index 67d92fa..7153c98 100644
--- a/llarp/config/config.cpp
+++ b/llarp/config/config.cpp
@@ -1387,7 +1387,7 @@ namespace llarp
         {
           ConfigParser parser;
           if (not parser.LoadFile(overrideFile))
-            throw std::runtime_error{"cannot load '" + overrideFile.u8string() + "'"};
+            throw std::runtime_error{fmt::format("cannot load '{}'", overrideFile)};
 
           parser.IterAll([&](std::string_view section, const SectionValues_t& values) {
             for (const auto& pair : values)
diff --git a/llarp/config/definition.hpp b/llarp/config/definition.hpp
index 6cacd31..42890e4 100644
--- a/llarp/config/definition.hpp
+++ b/llarp/config/definition.hpp
@@ -292,7 +292,7 @@ namespace llarp
       if (defaultValues.empty())
         return {};
       if constexpr (std::is_same_v<fs::path, T>)
-        return {{defaultValues.front().u8string()}};
+        return {{defaultValues.front().string()}};
       else
       {
         std::vector<std::string> def_strs;
diff --git a/llarp/dns/server.cpp b/llarp/dns/server.cpp
index ef1c01c..3b4e867 100644
--- a/llarp/dns/server.cpp
+++ b/llarp/dns/server.cpp
@@ -310,7 +310,7 @@ namespace llarp::dns
       // remaining args, and the formatted string passed to the above as `val`.
       template <typename... FmtArgs, std::enable_if_t<sizeof...(FmtArgs), int> = 0>
       void
-      SetOpt(const std::string& key, std::string_view format, FmtArgs&&... args)
+      SetOpt(const std::string& key, fmt::format_string<FmtArgs...> format, FmtArgs&&... args)
       {
         SetOpt(key, fmt::format(format, std::forward<FmtArgs>(args)...));
       }
@@ -366,7 +366,7 @@ namespace llarp::dns
         // add host files
         for (const auto& file : conf.m_hostfiles)
         {
-          const auto str = file.u8string();
+          const auto str = file.string();
           if (auto ret = ub_ctx_hosts(m_ctx, str.c_str()))
           {
             throw std::runtime_error{
diff --git a/llarp/net/ip_address.hpp b/llarp/net/ip_address.hpp
index 5be4407..ae6f7c9 100644
--- a/llarp/net/ip_address.hpp
+++ b/llarp/net/ip_address.hpp
@@ -19,7 +19,7 @@ namespace llarp
   /// As a convenience, it can produce a SockAddr for dealing with network libraries which depend
   /// sockaddr structs. However, it does not keep this as a member variable and isn't responsible
   /// for its lifetime/memory/etc.
-  struct [[deprecated("use llarp::SockAddr instead")]] IpAddress
+  struct IpAddress
   {
     /// Empty constructor.
     IpAddress() = default;
diff --git a/llarp/net/ip_packet.hpp b/llarp/net/ip_packet.hpp
index 3a1ed2d..2e28220 100644
--- a/llarp/net/ip_packet.hpp
+++ b/llarp/net/ip_packet.hpp
@@ -134,7 +134,7 @@ namespace llarp::net
     static constexpr size_t MaxSize = _max_size;
     static constexpr size_t MinSize = 20;
 
-    [[deprecated("deprecated because of llarp_buffer_t")]] static IPPacket
+    static IPPacket
     UDP(nuint32_t srcaddr,
         nuint16_t srcport,
         nuint32_t dstaddr,
@@ -163,7 +163,7 @@ namespace llarp::net
         return net::IPPacket{size_t{}};
     }
 
-    [[deprecated("deprecated because of llarp_buffer_t")]] inline bool
+    inline bool
     Load(const llarp_buffer_t& buf)
     {
       _buf = buf.copy();
@@ -173,7 +173,7 @@ namespace llarp::net
       return false;
     }
 
-    [[deprecated("deprecated because of llarp_buffer_t")]] inline llarp_buffer_t
+    inline llarp_buffer_t
     ConstBuffer() const
     {
       return llarp_buffer_t{_buf};
diff --git a/llarp/net/net.hpp b/llarp/net/net.hpp
index b3a7af8..49d006d 100644
--- a/llarp/net/net.hpp
+++ b/llarp/net/net.hpp
@@ -84,7 +84,7 @@ namespace llarp
           addr6.sin6_addr = IN6ADDR_ANY_INIT;
           return SockAddr{addr6};
         }
-        throw std::invalid_argument{fmt::format("{} is not a valid address family")};
+        throw std::invalid_argument{fmt::format("{} is not a valid address family", af)};
       }
 
       inline SockAddr
diff --git a/llarp/net/net_int.hpp b/llarp/net/net_int.hpp
index e34f9b2..293d6d3 100644
--- a/llarp/net/net_int.hpp
+++ b/llarp/net/net_int.hpp
@@ -202,7 +202,7 @@ namespace llarp
     {
       nuint_t<UInt_t> x{};
       if (not x.FromString(str))
-        throw std::invalid_argument{fmt::format("{} is not a valid value")};
+        throw std::invalid_argument{fmt::format("{} is not a valid value", str)};
       return x;
     }
 
@@ -256,25 +256,25 @@ namespace llarp
   template <>
   inline constexpr bool IsToStringFormattable<net::port_t> = true;
 
-  using nuint16_t [[deprecated("use llarp::net::port_t instead")]] = llarp::net::port_t;
-  using nuint32_t [[deprecated("use llarp::net::ipv4addr_t instead")]] = llarp::net::ipv4addr_t;
-  using nuint128_t [[deprecated("use llarp::net::ipv6addr_t instead")]] = llarp::net::ipv6addr_t;
+  using nuint16_t = llarp::net::port_t;
+  using nuint32_t = llarp::net::ipv4addr_t;
+  using nuint128_t = llarp::net::ipv6addr_t;
 
   template <typename UInt_t>
-  [[deprecated("use llarp::net::ToNet instead")]] inline llarp::nuint_t<UInt_t>
+  inline llarp::nuint_t<UInt_t>
   ToNet(llarp::huint_t<UInt_t> x)
   {
     return llarp::net::ToNet(x);
   }
 
   template <typename UInt_t>
-  [[deprecated("use llarp::net::ToHost instead")]] inline llarp::huint_t<UInt_t>
+  inline llarp::huint_t<UInt_t>
   ToHost(llarp::nuint_t<UInt_t> x)
   {
     return llarp::net::ToHost(x);
   }
 
-  [[deprecated("use llarp::net::ToHost instead")]] inline net::ipv4addr_t
+  inline net::ipv4addr_t
   xhtonl(huint32_t x)
   {
     return ToNet(x);
diff --git a/llarp/quic/connection.cpp b/llarp/quic/connection.cpp
index f9567f4..02393dd 100644
--- a/llarp/quic/connection.cpp
+++ b/llarp/quic/connection.cpp
@@ -90,7 +90,7 @@ namespace llarp::quic
         void* user_data)
     {
       std::basic_string_view data{rawdata, rawdatalen};
-      LogTrace("Receiving crypto data @ level ", crypto_level, " ", buffer_printer{data});
+      LogTrace("Receiving crypto data @ level ", static_cast<int>(crypto_level), " ", buffer_printer{data});
 
       auto& conn = *static_cast<Connection*>(user_data);
       switch (crypto_level)
@@ -150,7 +150,7 @@ namespace llarp::quic
           break;
 
         default:
-          LogWarn("Unhandled crypto_level ", crypto_level);
+          LogWarn("Unhandled crypto_level ", static_cast<int>(crypto_level));
           return FAIL;
       }
       conn.io_ready();
diff --git a/llarp/quic/stream.cpp b/llarp/quic/stream.cpp
index 93f2970..3d1c0f2 100644
--- a/llarp/quic/stream.cpp
+++ b/llarp/quic/stream.cpp
@@ -46,7 +46,7 @@ namespace llarp::quic
   std::string
   StreamID::ToString() const
   {
-    return fmt::format(u8"Str❰{}❱", id);
+    return fmt::format("Str❰{}❱", id);
   }
 
   Stream::Stream(
diff --git a/llarp/router/router.cpp b/llarp/router/router.cpp
index f3a807e..39a7e7c 100644
--- a/llarp/router/router.cpp
+++ b/llarp/router/router.cpp
@@ -446,8 +446,7 @@ namespace llarp
     _nodedb = std::move(nodedb);
 
     m_isServiceNode = conf.router.m_isRelay;
-    log::debug(
-        logcat, m_isServiceNode ? "Running as a relay (service node)" : "Running as a client");
+    log::debug(logcat, "Running as a {}", m_isServiceNode ? "relay (service node)" : "client");
 
     if (whitelistRouters)
     {
diff --git a/llarp/router_contact.cpp b/llarp/router_contact.cpp
index 194a59b..ec95bce 100644
--- a/llarp/router_contact.cpp
+++ b/llarp/router_contact.cpp
@@ -284,8 +284,13 @@ namespace llarp
       {
         bool decode_result = DecodeVersion_1(btlist);
 
+        // Abuse bt_list_consumer to grab a reference to its protected `data` string_view, which is
+        // the first member and so at the beginning of the struct.  This is horrible (thanks to the
+        // disaster known as llarp_buffer_t), and is going away in the in-progress lokinet rewrite.
+        auto& btlist_data = *reinterpret_cast<std::string_view*>(&btlist);
+
         // advance the llarp_buffer_t since lokimq serialization is unaware of it.
-        buf->cur += btlist.current_buffer().data() - buf_view.data() + 1;
+        buf->cur += btlist_data.data() - buf_view.data() + 1;
 
         return decode_result;
       }
diff --git a/llarp/util/buffer.hpp b/llarp/util/buffer.hpp
index abb0cff..8c1c7cb 100644
--- a/llarp/util/buffer.hpp
+++ b/llarp/util/buffer.hpp
@@ -27,7 +27,7 @@ struct ManagedBuffer;
 /// TODO: replace usage of these with std::span (via a backport until we move to C++20).  That's a
 /// fairly big job, though, as llarp_buffer_t is currently used a bit differently (i.e. maintains
 /// both start and current position, plus has some value reading/writing methods).
-struct [[deprecated("this type is stupid, use something else")]] llarp_buffer_t
+struct llarp_buffer_t
 {
   /// starting memory address
   byte_t* base{nullptr};
@@ -76,19 +76,19 @@ struct [[deprecated("this type is stupid, use something else")]] llarp_buffer_t
 
   // These overloads, const_casting away the const, are not just gross but downright dangerous:
   template <typename Byte, typename = std::enable_if_t<is_basic_byte<Byte>>>
-  [[deprecated("dangerous constructor that casts away constness, be very careful")]] llarp_buffer_t(
+  llarp_buffer_t(
       const Byte* buf, size_t sz)
       : llarp_buffer_t{const_cast<Byte*>(buf), sz}
   {}
 
   template <typename Byte, typename = std::enable_if_t<is_basic_byte<Byte>>>
-  [[deprecated("dangerous constructor that casts away constness, be very careful")]] llarp_buffer_t(
+  llarp_buffer_t(
       const std::vector<Byte>& b)
       : llarp_buffer_t{const_cast<Byte*>(b.data()), b.size()}
   {}
 
   template <typename Byte, size_t N, typename = std::enable_if_t<is_basic_byte<Byte>>>
-  [[deprecated("dangerous constructor that casts away constness, be very careful")]] llarp_buffer_t(
+  llarp_buffer_t(
       const std::array<Byte, N>& b)
       : llarp_buffer_t{const_cast<Byte*>(b.data()), b.size()}
   {}
@@ -213,7 +213,7 @@ llarp_buffer_t::write(InputIt begin, InputIt end)
 /**
  Provide a copyable/moveable wrapper around `llarp_buffer_t`.
  */
-struct [[deprecated("deprecated along with llarp_buffer_t")]] ManagedBuffer
+struct ManagedBuffer
 {
   llarp_buffer_t underlying;
 
diff --git a/llarp/util/logging.hpp b/llarp/util/logging.hpp
index 09c31fc..b4712e0 100644
--- a/llarp/util/logging.hpp
+++ b/llarp/util/logging.hpp
@@ -53,7 +53,7 @@ namespace llarp
   {
     LogTrace(
         T&&... args,
-        const log::slns::source_location& location = log::slns::source_location::current())
+        const log::source_location& location = log::source_location::current())
         : log::trace<T...>::trace{
             log_detail::legacy_logger,
             log_detail::concat_args_fmt<sizeof...(T)>(),
@@ -66,7 +66,7 @@ namespace llarp
   {
     LogDebug(
         T&&... args,
-        const log::slns::source_location& location = log::slns::source_location::current())
+        const log::source_location& location = log::source_location::current())
         : log::debug<T...>::debug{
             log_detail::legacy_logger,
             log_detail::concat_args_fmt<sizeof...(T)>(),
@@ -79,7 +79,7 @@ namespace llarp
   {
     LogInfo(
         T&&... args,
-        const log::slns::source_location& location = log::slns::source_location::current())
+        const log::source_location& location = log::source_location::current())
         : log::info<T...>::info{
             log_detail::legacy_logger,
             log_detail::concat_args_fmt<sizeof...(T)>(),
@@ -92,7 +92,7 @@ namespace llarp
   {
     LogWarn(
         T&&... args,
-        const log::slns::source_location& location = log::slns::source_location::current())
+        const log::source_location& location = log::source_location::current())
         : log::warning<T...>::warning{
             log_detail::legacy_logger,
             log_detail::concat_args_fmt<sizeof...(T)>(),
@@ -105,7 +105,7 @@ namespace llarp
   {
     LogError(
         T&&... args,
-        const log::slns::source_location& location = log::slns::source_location::current())
+        const log::source_location& location = log::source_location::current())
         : log::error<T...>::error{
             log_detail::legacy_logger,
             log_detail::concat_args_fmt<sizeof...(T)>(),
diff --git a/llarp/util/logging/buffer.cpp b/llarp/util/logging/buffer.cpp
index fe055b9..ac3a0ba 100644
--- a/llarp/util/logging/buffer.cpp
+++ b/llarp/util/logging/buffer.cpp
@@ -27,18 +27,18 @@ namespace llarp
         else
           fmt::format_to(ins, "{:02x}", std::to_integer<uint_fast16_t>(b[k]));
       }
-      out.append(u8"  ┃");
+      out.append("  ┃");
       for (size_t j = i; j < stop; j++)
       {
         auto c = std::to_integer<char>(b[j]);
         if (c == 0x00)
-          out.append(u8"∅");
+          out.append("∅");
         else if (c < 0x20 || c > 0x7e)
-          out.append(u8"·");
+          out.append("·");
         else
           out.push_back(c);
       }
-      out.append(u8"┃");
+      out.append("┃");
     }
     return out;
   }
diff --git a/llarp/util/str.cpp b/llarp/util/str.cpp
index 56ca034..370c7de 100644
--- a/llarp/util/str.cpp
+++ b/llarp/util/str.cpp
@@ -157,13 +157,14 @@ namespace llarp
   {
     const double dsecs = std::chrono::duration<double>(dur).count();
     return fmt::format(
-        dur >= 24h        ? "{0}d{1}h{2}m{3}s"
-            : dur >= 1h   ? "{1}h{2}m{3}s"
-            : dur >= 1min ? "{2}m{3}s"
-            : dur >= 1s   ? "{4:.3f}s"
-            : dur >= 1ms  ? "{5:.3f}s"
-            : dur >= 1us  ? u8"{6:.3f}µs"
-                          : "{7}ns",
+        fmt::runtime(
+            dur >= 24h        ? "{0}d{1}h{2}m{3}s"
+                : dur >= 1h   ? "{1}h{2}m{3}s"
+                : dur >= 1min ? "{2}m{3}s"
+                : dur >= 1s   ? "{4:.3f}s"
+                : dur >= 1ms  ? "{5:.3f}s"
+                : dur >= 1us  ? "{6:.3f}µs"
+                              : "{7}ns"),
         dur / 24h,
         dur / 1h,
         dur / 1min,
diff --git a/llarp/util/time.cpp b/llarp/util/time.cpp
index 1b0b243..3d93b91 100644
--- a/llarp/util/time.cpp
+++ b/llarp/util/time.cpp
@@ -73,10 +73,11 @@ namespace llarp
 
     using namespace fmt::literals;
     return fmt::format(
-        delta < now_threshold ? "now"
-            : delta < 10s     ? "{in}{secs:d}.{ms:03d}s{ago}"
-            : delta < 1h      ? "{in}{mins:d}m{secs:02d}s{ago}"
-                              : "{in}{hours:d}h{mins:02d}m{ago}",
+        fmt::runtime(
+            delta < now_threshold ? "now"
+                : delta < 10s     ? "{in}{secs:d}.{ms:03d}s{ago}"
+                : delta < 1h      ? "{in}{mins:d}m{secs:02d}s{ago}"
+                                  : "{in}{hours:d}h{mins:02d}m{ago}"),
         "in"_a = future ? "in " : "",
         "ago"_a = future ? "" : " ago",
         "hours"_a = hours,
@@ -96,9 +97,10 @@ namespace llarp
 
     using namespace fmt::literals;
     return fmt::format(
-        delta < 1min     ? "{neg}{secs:d}.{ms:03d}s"
-            : delta < 1h ? "{neg}{mins:d}m{secs:02d}.{ms:03d}s"
-                         : "{neg}{hours:d}h{mins:02d}m{secs:02d}.{ms:03d}s",
+        fmt::runtime(
+            delta < 1min     ? "{neg}{secs:d}.{ms:03d}s"
+                : delta < 1h ? "{neg}{mins:d}m{secs:02d}.{ms:03d}s"
+                             : "{neg}{hours:d}h{mins:02d}m{secs:02d}.{ms:03d}s"),
         "neg"_a = neg ? "-" : "",
         "hours"_a = hours,
         "mins"_a = mins,
